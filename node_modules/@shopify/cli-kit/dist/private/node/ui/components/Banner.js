import { Box, Text, useStdout } from 'ink';
import React from 'react';
function typeToColor(type) {
    return {
        success: 'green',
        error: 'red',
        warning: 'yellow',
        info: 'dim',
        external_error: 'red',
    }[type];
}
const BANNER_MIN_WIDTH = 80;
function calculateWidth(stdout) {
    const fullWidth = stdout?.columns ?? BANNER_MIN_WIDTH;
    const twoThirdsOfWidth = Math.floor((fullWidth / 3) * 2);
    let width;
    if (fullWidth <= BANNER_MIN_WIDTH) {
        width = fullWidth;
    }
    else if (twoThirdsOfWidth < BANNER_MIN_WIDTH) {
        width = BANNER_MIN_WIDTH;
    }
    else {
        width = twoThirdsOfWidth;
    }
    return width;
}
const BoxWithBorder = ({ type, marginY, children }) => {
    const { stdout } = useStdout();
    return (React.createElement(Box, { width: calculateWidth(stdout), paddingY: 1, paddingX: 2, marginY: marginY, borderStyle: "round", flexDirection: "column", borderColor: typeToColor(type) },
        React.createElement(Box, { marginTop: -2, marginBottom: 1, marginLeft: -1 },
            React.createElement(Text, null, ` ${type.replace(/_/g, ' ')} `)),
        children));
};
const BoxWithTopBottomLines = ({ type, marginY, children }) => {
    const { stdout } = useStdout();
    const width = calculateWidth(stdout);
    return (React.createElement(Box, { marginY: marginY, flexDirection: "column" },
        React.createElement(Box, { marginBottom: 1 },
            React.createElement(Text, null,
                React.createElement(Text, { color: typeToColor(type) }, '─'.repeat(2)),
                React.createElement(Text, null, ` ${type.replace(/_/g, ' ')} `),
                React.createElement(Text, { color: typeToColor(type) }, '─'.repeat(width - 2 - type.length - 2)))),
        children,
        React.createElement(Box, { marginTop: 1 },
            React.createElement(Text, { color: typeToColor(type) }, '─'.repeat(width)))));
};
const Banner = ({ children, ...props }) => {
    if (props.type === 'external_error') {
        return React.createElement(BoxWithTopBottomLines, props, children);
    }
    else {
        return React.createElement(BoxWithBorder, props, children);
    }
};
export { Banner };
//# sourceMappingURL=Banner.js.map