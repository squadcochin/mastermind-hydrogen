import { AttributeInput, CartBuyerIdentityInput, CartInput, CartLineInput, CartLineUpdateInput, CountryCode } from '../../storefront-api-types.js';
import { CartAttributesUpdateMutation } from './graphql/CartAttributesUpdateMutation.js';
import { CartBuyerIdentityUpdateMutation } from './graphql/CartBuyerIdentityUpdateMutation.js';
import { CartCreateMutation } from './graphql/CartCreateMutation.js';
import { CartDiscountCodesUpdateMutation, CartDiscountCodesUpdateMutationVariables } from './graphql/CartDiscountCodesUpdateMutation.js';
import { CartLineAddMutation } from './graphql/CartLineAddMutation.js';
import { CartLineRemoveMutation } from './graphql/CartLineRemoveMutation.js';
import { CartLineUpdateMutation } from './graphql/CartLineUpdateMutation.js';
import { CartNoteUpdateMutation, CartNoteUpdateMutationVariables } from './graphql/CartNoteUpdateMutation.js';
import { CartQueryQuery } from './graphql/CartQuery.js';
/**
 * The `useCartActions` hook returns helper graphql functions for Storefront Cart API
 *
 * See [cart API graphql mutations](https://shopify.dev/api/storefront/2022-07/objects/Cart)
 */
export declare function useCartActions({ numCartLines, cartFragment, countryCode, }: {
    /**  Maximum number of cart lines to fetch. Defaults to 250 cart lines. */
    numCartLines?: number;
    /** A fragment used to query the Storefront API's [Cart object](https://shopify.dev/api/storefront/latest/objects/cart) for all queries and mutations. A default value is used if no argument is provided. */
    cartFragment: string;
    /** The ISO country code for i18n. */
    countryCode?: CountryCode;
}): {
    cartFetch: (cartId: string) => Promise<{
        data: CartQueryQuery | undefined;
        errors: any;
    }>;
    cartCreate: (cart: CartInput) => Promise<{
        data: CartCreateMutation | undefined;
        errors: any;
    }>;
    cartLineAdd: (cartId: string, lines: CartLineInput[]) => Promise<{
        data: CartLineAddMutation | undefined;
        errors: any;
    }>;
    cartLineUpdate: (cartId: string, lines: CartLineUpdateInput[]) => Promise<{
        data: CartLineUpdateMutation | undefined;
        errors: any;
    }>;
    cartLineRemove: (cartId: string, lines: string[]) => Promise<{
        data: CartLineRemoveMutation | undefined;
        errors: any;
    }>;
    noteUpdate: (cartId: string, note: CartNoteUpdateMutationVariables['note']) => Promise<{
        data: CartNoteUpdateMutation | undefined;
        errors: any;
    }>;
    buyerIdentityUpdate: (cartId: string, buyerIdentity: CartBuyerIdentityInput) => Promise<{
        data: CartBuyerIdentityUpdateMutation | undefined;
        errors: any;
    }>;
    cartAttributesUpdate: (cartId: string, attributes: AttributeInput[]) => Promise<{
        data: CartAttributesUpdateMutation | undefined;
        errors: any;
    }>;
    discountCodesUpdate: (cartId: string, discountCodes: CartDiscountCodesUpdateMutationVariables['discountCodes']) => Promise<{
        data: CartDiscountCodesUpdateMutation | undefined;
        errors: any;
    }>;
    cartFragment: string;
};
