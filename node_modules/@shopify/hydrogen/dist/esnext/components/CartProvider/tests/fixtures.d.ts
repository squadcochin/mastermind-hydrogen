import type { CartWithActions } from '../types.js';
import { CartFragmentFragment } from '../graphql/CartFragment.js';
export declare const CART: {
    id: string;
    checkoutUrl: string;
    attributes: never[];
    buyerIdentity: {};
    discountCodes: never[];
    totalQuantity: number;
    cost: {
        subtotalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalTaxAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalDutyAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
    };
    lines: {
        edges: never[];
    };
};
export declare function getCartMock(options?: Partial<CartFragmentFragment>): {
    __typename?: "Cart" | undefined;
    id: string;
    note?: import("../../../storefront-api-types.js").Maybe<string> | undefined;
    checkoutUrl: string;
    totalQuantity: number;
    buyerIdentity: {};
    lines: ({
        __typename?: "CartLineConnection" | undefined;
    } & {
        edges: ({
            __typename?: "CartLineEdge" | undefined;
        } & {
            node: {
                __typename?: "CartLine" | undefined;
            } & Pick<import("../../../storefront-api-types.js").CartLine, "id" | "quantity"> & {
                attributes: ({
                    __typename?: "Attribute" | undefined;
                } & Pick<import("../../../storefront-api-types.js").Attribute, "key" | "value">)[];
                cost: {
                    __typename?: "CartLineCost" | undefined;
                } & {
                    totalAmount: {
                        __typename?: "MoneyV2" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">;
                    compareAtAmountPerQuantity?: import("../../../storefront-api-types.js").Maybe<{
                        __typename?: "MoneyV2" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">> | undefined;
                };
                merchandise: {
                    __typename?: "ProductVariant" | undefined;
                } & Pick<import("../../../storefront-api-types.js").ProductVariant, "id" | "title" | "availableForSale" | "requiresShipping"> & {
                    compareAtPriceV2?: import("../../../storefront-api-types.js").Maybe<{
                        __typename?: "MoneyV2" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">> | undefined;
                    priceV2: {
                        __typename?: "MoneyV2" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">;
                    image?: import("../../../storefront-api-types.js").Maybe<{
                        __typename?: "Image" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").Image, "id" | "height" | "width" | "url" | "altText">> | undefined;
                    product: {
                        __typename?: "Product" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").Product, "title" | "handle">;
                    selectedOptions: ({
                        __typename?: "SelectedOption" | undefined;
                    } & Pick<import("../../../storefront-api-types.js").SelectedOption, "name" | "value">)[];
                };
            };
        })[];
    }) | {
        edges: never[];
    };
    cost: ({
        __typename?: "CartCost" | undefined;
    } & {
        subtotalAmount: {
            __typename?: "MoneyV2" | undefined;
        } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">;
        totalAmount: {
            __typename?: "MoneyV2" | undefined;
        } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">;
        totalDutyAmount?: import("../../../storefront-api-types.js").Maybe<{
            __typename?: "MoneyV2" | undefined;
        } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">> | undefined;
        totalTaxAmount?: import("../../../storefront-api-types.js").Maybe<{
            __typename?: "MoneyV2" | undefined;
        } & Pick<import("../../../storefront-api-types.js").MoneyV2, "currencyCode" | "amount">> | undefined;
    }) | {
        subtotalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalTaxAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalDutyAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
    };
    attributes: ({
        __typename?: "Attribute" | undefined;
    } & Pick<import("../../../storefront-api-types.js").Attribute, "key" | "value">)[];
    discountCodes: ({
        __typename?: "CartDiscountCode" | undefined;
    } & Pick<import("../../../storefront-api-types.js").CartDiscountCode, "code" | "applicable">)[];
};
export declare const CART_WITH_LINES: {
    lines: {
        edges: {
            node: {
                attributes: {
                    key: string;
                    value: string;
                }[];
                quantity: number;
                id: string;
                merchandise: {
                    id: string;
                    availableForSale: boolean;
                    priceV2: {
                        amount: string;
                        currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
                    };
                    product: {
                        handle: string;
                        title: string;
                    };
                    requiresShipping: boolean;
                    selectedOptions: {
                        name: string;
                        value: string;
                    }[];
                    title: string;
                };
                cost: {
                    totalAmount: {
                        amount: string;
                        currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
                    };
                    compareAtAmount: {
                        amount: string;
                        currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
                    };
                };
            };
        }[];
    };
    id: string;
    checkoutUrl: string;
    attributes: never[];
    buyerIdentity: {};
    discountCodes: never[];
    totalQuantity: number;
    cost: {
        subtotalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalTaxAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalDutyAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
    };
};
export declare const CART_WITH_LINES_FLATTENED: {
    lines: import("type-fest/source/partial-deep.js").PartialObjectDeep<{
        attributes: {
            key: string;
            value: string;
        }[];
        quantity: number;
        id: string;
        merchandise: {
            id: string;
            availableForSale: boolean;
            priceV2: {
                amount: string;
                currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            };
            product: {
                handle: string;
                title: string;
            };
            requiresShipping: boolean;
            selectedOptions: {
                name: string;
                value: string;
            }[];
            title: string;
        };
        cost: {
            totalAmount: {
                amount: string;
                currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            };
            compareAtAmount: {
                amount: string;
                currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            };
        };
    }>[];
    id: string;
    checkoutUrl: string;
    attributes: never[];
    buyerIdentity: {};
    discountCodes: never[];
    totalQuantity: number;
    cost: {
        subtotalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalTaxAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
        totalDutyAmount: {
            currencyCode: import("../../../storefront-api-types.js").CurrencyCode;
            amount: string;
        };
    };
};
export declare const CART_ACTIONS: CartWithActions;
export declare const CART_WITH_ACTIONS: CartWithActions;
