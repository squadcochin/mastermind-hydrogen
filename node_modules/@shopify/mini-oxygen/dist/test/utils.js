"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFixture = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const get_port_1 = __importDefault(require("get-port"));
async function createFixture(name) {
    const directory = (0, path_1.resolve)(__dirname, 'fixtures', name);
    const paths = {
        root: directory,
        config: (0, path_1.join)(directory, 'mini-oxygen.config.json'),
        workerFile: (0, path_1.join)(directory, 'worker.mjs'),
        assets: (0, path_1.join)(directory, 'assets'),
    };
    function write(fileName, content) {
        return (0, fs_extra_1.writeFile)((0, path_1.join)(directory, fileName), content);
    }
    await (0, fs_extra_1.ensureDir)(directory);
    (0, fs_extra_1.writeFile)((0, path_1.join)(directory, '.gitignore'), '*');
    await (0, fs_extra_1.writeFile)((0, path_1.join)(directory, 'mini-oxygen.config.json'), JSON.stringify({
        port: 3000,
        workerFile: 'worker.mjs',
        watch: true,
        env: { TESTING: 123, HELLO: 12345 },
        autoReload: true,
    }, null, 2));
    await (0, fs_extra_1.writeFile)((0, path_1.join)(directory, 'package.json'), JSON.stringify({
        name: 'test-worker',
        version: '1.0.0',
        description: 'A test worker',
        main: 'worker.mjs',
        license: 'MIT',
        type: 'module',
    }, null, 2));
    await (0, fs_extra_1.writeFile)((0, path_1.join)(directory, 'worker.mjs'), `
export default {
  async fetch(request, environment, context) {
    if (new URL(request.url).pathname === '/html') {
      return new Response('<html><body>Hello, world</body>', {
        headers: {"Content-Type": "text/html"}
      });
    }

    return new Response(JSON.stringify(environment), {
      headers: {"Content-Type": "application/json"}
    });
  }
}
    `.trim());
    return {
        paths,
        port: await (0, get_port_1.default)(),
        destroy: async () => {
            await (0, fs_extra_1.remove)(directory);
        },
    };
}
exports.createFixture = createFixture;
