{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/cli/services/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["import {DeployConfig, ReqDeployConfig} from './deploy/types.js'\nimport {createDeployment, healthCheck, uploadDeployment} from './deploy/upload.js'\nimport {buildTaskList} from './build.js'\nimport {validateProject, fillDeployConfig} from './deploy/config.js'\nimport {environment, system, ui} from '@shopify/cli-kit'\n\ninterface TaskContext {\n  config: ReqDeployConfig\n  deploymentID: string\n  assetBaseURL: string\n  previewURL: string\n}\n\nconst isUnitTest = environment.local.isUnitTest()\nconst backoffPolicy = [5, 10, 15, 30, 60]\n\nexport async function deployToOxygen(_config: DeployConfig) {\n  await validateProject(_config)\n\n  /* eslint-disable require-atomic-updates */\n  const tasks: ui.ListrTask<TaskContext>[] = [\n    {\n      title: '📝 Getting deployment config',\n      task: async (ctx, task) => {\n        ctx.config = await fillDeployConfig(_config)\n        task.title = '📝 Deployment config parsed'\n      },\n    },\n    {\n      title: '💡 Initializing deployment',\n      task: async (ctx, task) => {\n        await shouldRetryOxygenCall(task, 'Could not create deployment on Oxygen.')\n\n        const {deploymentID, assetBaseURL} = await createDeployment(ctx.config)\n        ctx.assetBaseURL = assetBaseURL\n        ctx.deploymentID = deploymentID\n        task.title = '✨ Deployment initialized'\n      },\n      retry: backoffPolicy.length,\n    },\n    {\n      title: '🛠 Building project',\n      task: async (ctx, task) => {\n        const subTasks = buildTaskList({\n          directory: ctx.config.path,\n          targets: {\n            client: true,\n            worker: '@shopify/hydrogen/platforms/worker',\n            node: false,\n          },\n          assetBaseURL: ctx.assetBaseURL,\n        })\n\n        return task.newListr(subTasks)\n      },\n      skip: (ctx) => ctx.config.pathToBuild,\n    },\n    {\n      title: '🚀 Uploading deployment files',\n      task: async (ctx, task) => {\n        await shouldRetryOxygenCall(task, 'Uploading files to Oxygen failed.')\n\n        ctx.previewURL = await uploadDeployment(ctx.config, ctx.deploymentID)\n        task.output = `Preview URL: ${ctx.previewURL}`\n        task.title = '🚀 Files uploaded'\n      },\n      options: {\n        bottomBar: Infinity,\n        persistentOutput: true,\n      },\n      retry: backoffPolicy.length,\n    },\n    {\n      title: '📡 Checking deployment health',\n      task: async (ctx, task) => {\n        const retryCount = task.isRetrying()?.count\n\n        if (retryCount === backoffPolicy.length) {\n          task.title =\n            \"The deployment uploaded but hasn't become reachable within 2 minutes. Check the preview URL to see if deployment succeeded. If it didn't, then try again later.\"\n          return\n        }\n        if (retryCount && !isUnitTest) await system.sleep(backoffPolicy[retryCount - 1]!)\n\n        await healthCheck(ctx.previewURL)\n        task.title = '✅ Deployed successfully'\n      },\n      retry: backoffPolicy.length,\n      skip: (ctx) => !ctx.config.healthCheck,\n    },\n  ]\n  /* eslint-enable require-atomic-updates */\n\n  const list = ui.newListr(tasks, {\n    concurrent: false,\n    rendererOptions: {collapse: false},\n    rendererSilent: isUnitTest,\n  })\n\n  return list.run()\n}\n\nasync function shouldRetryOxygenCall(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  task: ui.ListrTaskWrapper<TaskContext, any>,\n  errorMessage: string,\n) {\n  const retryCount = task.isRetrying()?.count\n  if (retryCount === backoffPolicy.length) {\n    throw new Error(`${errorMessage} ${task.errors[task.errors.length - 1]?.message}`)\n  }\n  if (retryCount) {\n    if (task.errors.length > 0) {\n      const unrecoverableError = task.errors.find((error) => error.message.includes('Unrecoverable'))\n      if (unrecoverableError) {\n        throw new Error(unrecoverableError.message)\n      }\n    }\n  }\n  if (retryCount && !isUnitTest) await system.sleep(backoffPolicy[retryCount - 1]!)\n}\n"]}