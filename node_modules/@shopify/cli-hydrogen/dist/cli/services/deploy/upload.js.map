{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/upload.ts"],"names":[],"mappings":"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","sourcesContent":["import {ReqDeployConfig, UploadDeploymentResponse} from './types.js'\nimport {\n  CreateDeploymentResponse,\n  CreateDeploymentQuerySchema,\n  CreateDeploymentQuery,\n} from './graphql/create_deployment.js'\nimport {UnrecoverableError, WebPageNotAvailable, TooManyRequestsError} from './error.js'\nimport {UploadDeploymentQuery} from './graphql/upload_deployment.js'\nimport {api, http, file} from '@shopify/cli-kit'\nimport {zip} from '@shopify/cli-kit/node/archiver'\nimport {ClientError} from 'graphql-request'\n\nexport const createDeployment = async (config: ReqDeployConfig): Promise<CreateDeploymentResponse> => {\n  const variables = {\n    input: {\n      branch: config.commitRef,\n      commitHash: config.commitSha,\n      commitAuthor: config.commitAuthor,\n      commitMessage: config.commitMessage,\n      commitTimestamp: config.timestamp,\n    },\n  }\n\n  try {\n    const response: CreateDeploymentQuerySchema = await api.oxygen.request(\n      config.oxygenAddress,\n      CreateDeploymentQuery,\n      config.deploymentToken,\n      variables,\n    )\n\n    if (response.createDeployment?.error) {\n      if (response.createDeployment.error.unrecoverable) {\n        throw UnrecoverableError(response.createDeployment.error.debugInfo)\n      }\n\n      throw new Error(`Failed to create deployment. ${response.createDeployment.error.debugInfo}`)\n    }\n\n    return response.createDeployment\n  } catch (error) {\n    if (error instanceof ClientError) {\n      if (error.response.status === 429) {\n        throw TooManyRequestsError()\n      }\n    }\n\n    throw error\n  }\n}\n\nexport const uploadDeployment = async (config: ReqDeployConfig, deploymentID: string): Promise<string> => {\n  let deploymentData: UploadDeploymentResponse | undefined\n\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const distPath = config.pathToBuild ? config.pathToBuild : `${config.path}/dist`\n    const distZipPath = `${tmpDir}/dist.zip`\n    await zip(distPath, distZipPath)\n\n    const formData = http.formData()\n    formData.append('operations', buildOperationsString(deploymentID))\n    formData.append('map', JSON.stringify({'0': ['variables.file']}))\n    formData.append('0', file.createReadStream(distZipPath), {filename: distZipPath})\n\n    const response = await api.oxygen.uploadDeploymentFile(config.oxygenAddress, config.deploymentToken, formData)\n    if (!response.ok) {\n      if (response.status === 429) {\n        throw TooManyRequestsError()\n      }\n      if (response.status !== 200 && response.status !== 202) {\n        throw new Error(`Failed to upload deployment. ${await response.json()}`)\n      }\n    }\n\n    deploymentData = (await response.json()) as UploadDeploymentResponse\n  })\n\n  if (!deploymentData) {\n    throw new Error('Failed to upload deployment.')\n  }\n  const deploymentError = deploymentData.data?.uploadDeployment?.error\n  if (deploymentError) {\n    if (deploymentError.unrecoverable) {\n      throw UnrecoverableError(deploymentError.debugInfo)\n    }\n\n    throw new Error(`Failed to upload deployment: ${deploymentError.debugInfo}`)\n  }\n\n  return deploymentData.data.uploadDeployment.deployment.previewURL\n}\n\nexport const healthCheck = async (pingUrl: string) => {\n  const url = `${pingUrl}/__health`\n  const result = await http.fetch(url, {method: 'GET'})\n  if (result.status !== 200) throw WebPageNotAvailable()\n}\n\nconst buildOperationsString = (deploymentID: string): string => {\n  return JSON.stringify({\n    query: UploadDeploymentQuery,\n    variables: {deploymentID, file: null},\n  })\n}\n"]}