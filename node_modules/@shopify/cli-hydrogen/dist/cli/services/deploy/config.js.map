{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/config.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,OAAO,EAAC,MAAM,2BAA2B,CAAA;AACjD,OAAO,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,MAAM,kBAAkB,CAAA;AAEjD,MAAM,kBAAkB,GAA0B;IAChD,MAAM,EAAE,CAAC,WAAW,CAAC;IACrB,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,iBAAiB,CAAC;IAC/E,OAAO,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC;IAChC,YAAY,EAAE,CAAC,eAAe,EAAE,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,SAAS,CAAC;IAC9E,UAAU,EAAE,CAAC,eAAe,CAAC;IAC7B,WAAW,EAAE,CAAC,MAAM,EAAE,WAAW,EAAE,YAAY,CAAC;IAChD,UAAU,EAAE,CAAC,OAAO,CAAC;CACtB,CAAA;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,MAAoB,EAAE,EAAE;IAC5D,MAAM,GAAG,CAAC,oBAAoB,EAAE,CAAA;IAChC,IAAI;QACF,MAAM,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;KAChD;IAAC,OAAO,GAAY,EAAE;QACrB,IAAK,GAAmB,EAAE,OAAO,KAAK,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO;YAAE,MAAM,KAAK,CAAA;QACpG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAA;KAC5B;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,MAAoB,EAAE,EAAE;IAC1D,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;QACrB,MAAM,aAAa,GAAG,MAAM,OAAO,EAAE,CAAA;QACrC,IAAI,CAAC,aAAa;YAAE,MAAM,IAAI,KAAK,CAAC,WAAW,EAAE,CAAA;KAClD;IAED,MAAM,GAAG,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC3C,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAA;IACpD,MAAM,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC7B,MAAM,GAAG,CAAC,MAAM,CAAC,sCAAsC,EAAE,EAAC,SAAS,EAAE,MAAM,CAAC,IAAI,EAAC,CAAC,CAAA;AACpF,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,MAAoB,EAA4B,EAAE;IACvF,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAClD,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC;QAChC,GAAG,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC;KACpC,CAAC,CAAA;IAEF,OAAO;QACL,GAAG,MAAM;QACT,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;QACvE,aAAa,EAAE,MAAM,CAAC,aAAa,IAAI,YAAY,CAAC,OAAO;QAC3D,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,YAAY,CAAC,WAAW;QAC7D,SAAS,EAAE,YAAY,CAAC,IAAI;QAC5B,SAAS,EAAE,YAAY,CAAC,IAAI;QAC5B,SAAS;KACV,CAAA;AACH,CAAC,CAAA","sourcesContent":["import {DeployConfig, ReqDeployConfig} from './types.js'\nimport {gitInit} from '../../prompts/git-init.js'\nimport {git, error, path} from '@shopify/cli-kit'\n\nconst MINIMAL_GIT_IGNORE: git.GitIgnoreTemplate = {\n  system: ['.DS_Store'],\n  logs: ['logs', '*.log', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*'],\n  testing: ['/coverage', '*.lcov'],\n  dependencies: ['/node_modules', '.npm', '.yarn-integrity', '/.pnp', '.pnp.js'],\n  typescript: ['*.tsbuildinfo'],\n  environment: ['.env', '.env.test', '.env.local'],\n  production: ['/dist'],\n}\n\nexport const validateProject = async (config: DeployConfig) => {\n  await git.ensurePresentOrAbort()\n  try {\n    await git.ensureInsideGitDirectory(config.path)\n  } catch (err: unknown) {\n    if ((err as error.Abort)?.message !== git.OutsideGitDirectoryError(config.path).message) throw error\n    await initializeGit(config)\n  }\n}\n\nexport const initializeGit = async (config: DeployConfig) => {\n  if (!config.assumeYes) {\n    const shouldGitInit = await gitInit()\n    if (!shouldGitInit) throw new error.AbortSilent()\n  }\n\n  await git.initializeRepository(config.path)\n  git.createGitIgnore(config.path, MINIMAL_GIT_IGNORE)\n  await git.addAll(config.path)\n  await git.commit('Initial commit generated by Hydrogen', {directory: config.path})\n}\n\nexport const fillDeployConfig = async (config: DeployConfig): Promise<ReqDeployConfig> => {\n  const [latestCommit, commitRef] = await Promise.all([\n    git.getLatestCommit(config.path),\n    git.getHeadSymbolicRef(config.path),\n  ])\n\n  return {\n    ...config,\n    pathToBuild: config.pathToBuild ? path.resolve(config.pathToBuild) : '',\n    commitMessage: config.commitMessage ?? latestCommit.message,\n    commitAuthor: config.commitAuthor ?? latestCommit.author_name,\n    commitSha: latestCommit.hash,\n    timestamp: latestCommit.date,\n    commitRef,\n  }\n}\n"]}